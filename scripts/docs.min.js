/**
 * angular-strap
 * @version v2.0.0-b.1 - 2014-01-06
 * @link http://mgcrea.github.io/angular-strap
 * @author Olivier Louvignes <olivier@mg-crea.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";angular.module("mgcrea.ngStrapDocs",["mgcrea.ngStrap.affix","mgcrea.ngStrap.modal","mgcrea.ngStrap.aside","mgcrea.ngStrap.dropdown","mgcrea.ngStrap.tab","mgcrea.ngStrap.tooltip","mgcrea.ngStrap.popover","mgcrea.ngStrap.alert","mgcrea.ngStrap.button","mgcrea.ngStrap.scrollspy","ngSanitize","ngRoute","ngAnimate"]).config(["$routeProvider",function(a){a.when("/",{id:"home",templateUrl:"views/home/main.html",footerUrl:"views/home/footer.html"}).when("/directives",{id:"getting-started",templateUrl:"views/getting-started/main.html",headerUrl:"views/common/header.html",headerTitle:"Getting started",headerBody:"An overview of Bootstrap, how to download and use, basic templates and examples, and more.",footerUrl:"views/common/footer.html",reloadOnSearch:!1}).otherwise({redirectTo:"/"})}]).controller("MainCtrl",["$scope","$rootScope","$location","$anchorScroll",function(a,b,c,d){a.$scrollTo=function(a){c.hash(a),d()},b.$on("$routeChangeSuccess",function(){})}]).run(["$window","$location","$anchorScroll",function(a,b,c){var d=angular.element(a.document.body);d.on("click",function(a){var d=angular.element(a.target).attr("href");d&&"#"===d[0]&&(a.preventDefault(),b.hash(d.substr(1)),b.search("id",d.substr(1)),c())})}]).directive("code",function(){return{restrict:"E",terminal:!0}}).directive("appendSource",["$window","$compile","indent",function(a,b,c){return{compile:function(b,d){var e={placement:"after"};angular.forEach(["placement","hlClass"],function(a){angular.isDefined(d[a])&&(e[a]=d[a])});var f=angular.element('<div class="highlight" ng-non-bindable><pre><code class="html" style="margin:0"></code></pre></div>'),g=f.children("pre").children("code"),h=c(b.html());g.text(h),e.hlClass&&g.addClass(e.hlClass),b[e.placement](f),a.hljs.highlightBlock(g[0])}}}]).directive("highlightBlock",["$window","indent",function(a,b){return{compile:function(c){return c.html(b(c.html())),function(b,c){a.hljs.highlightBlock(c[0])}}}}]).value("indent",function(a,b){if(!a)return a;for(var c,d=a.split(/\r?\n/),e="      ".substr(0,b||0);d.length&&d[0].match(/^\s*$/);)d.shift();for(;d.length&&d[d.length-1].match(/^\s*$/);)d.pop();var f=999;for(c=0;c<d.length;c++){var g=d[0],h=g.match(/^\s*/)[0];h!==g&&h.length<f&&(f=h.length)}for(c=0;c<d.length;c++)d[c]=e+d[c].substring(f);return d.push(""),d.join("\n")}),angular.module("mgcrea.ngStrapDocs").run(["$templateCache",function(a){a.put("affix/docs/affix.demo.html",'<div class="bs-docs-section">\n\n  <div class="page-header">\n    <h1 id="affix">Affix <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/affix/affix.js" target="_blank">affix.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.affix</code>\n  </div>\n\n  <h2 id="affix-examples">Examples</h2>\n  <p>The subnavigation on the left is a live demo of the affix plugin.</p>\n\n  <div class="callout callout-warning">\n    <h4>Plugin dependency</h4>\n    <p>Affix require the <a href="#">jqlite.dimensions</a> plugin to be included.</p>\n  </div>\n\n  <div class="highlight">\n    <pre>\n      <code class="html" highlight-block>\n        &lt;div class="bs-sidebar hidden-print" role="complementary" data-offset-top="-80" bs-affixt&gt;&lt;/div&gt;\n      </code>\n    </pre>\n  </div>\n\n  <h2 id="affix-usage">Usage</h2>\n  <p>Append a <code>bs-affix</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$affix</code>service</h4>\n    <p>Available for programmatic use (mainly inside a directive as it requires an element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var affix = $affix(element, options);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>offsetTop</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from top of screen when calculating position of scroll.</td>\n        </tr>\n        <tr>\n          <td>offsetBottom</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from bottom of screen when calculating position of scroll.</td>\n        </tr>\n        <tr>\n          <td>offsetParent</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from parent when calculating position of scroll.</td>\n        </tr>\n        <tr>\n          <td>offsetUnpin</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from unpin position when calculating position of scroll.</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$affixProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($affixProvider) {\n            angular.extend($affixProvider.defaults, {\n              animation: \'animation-fadeAndSlideTop\',\n              placement: \'top\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("alert/docs/alert.demo.html",'<div class="bs-docs-section" ng-controller="AlertDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="alerts">Alerts <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/alert/alert.js" target="_blank">alert.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.alert</code>\n  </div>\n\n\n  <h2 id="alerts-examples">Examples</h2>\n  <p>Alerts are styled tiny dialogs that inherit the behavior of modals.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Alerts require the <a href="#modals">modal plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo <a class="small" href="#" target="_blank"><i class="fa fa-edit" data-title="edit in plunker" data-placement="right" bs-tooltip></i></a></h3>\n  <pre class="bs-example-scope">$scope.alert = {{alert | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default alert with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="top-right" bs-alert="alert">Click to toggle alert\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can also use data-attrs to assign scope variables -->\n    <button type="button" class="btn btn-lg btn-primary" title="{{alert.title}}" data-content="{{alert.content}}" data-type="success" data-container="#alerts-container" bs-alert>Click to toggle alert\n      <br />\n      <small>(using data-attrs)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" data-template="alert/docs/alert.tpl.demo.html" data-placement="top" data-animation="animation-fadeAndSlideTop" data-container="body" data-keyboard="true" bs-alert="alert">Custom alert\n      <br />\n      <small>(using data-template)</small>\n    </button>\n\n    <!-- Element container to append the first alert -->\n    <hr>\n    <div id="alerts-container"></div>\n\n  </div>\n\n\n  <h2 id="alerts-usage">Usage</h2>\n  <p>Append a <code>bs-alert</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$alert</code>service</h4>\n    <p>Available for programmatic use (inside a controller/directive).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .controller(\'DemoCtrl\', function($scope, $alert) {\n            var myAlert = $alert({title: \'Holy guacamole!\', content: \'Best check yo self, you\\\'re not looking too good.\', placement: \'top\', type: \'info\', show: true});\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-aside</code> attribute</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>animation-fade</td>\n          <td>apply a CSS animation powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>how to position the alert - top | top-left | top-right <small>(requires custom CSS)</small>.</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>type</td>\n          <td>string</td>\n          <td>\'info\'</td>\n          <td>default content value if <code>data-type</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the modal when escape key is pressed</td>\n        </tr>\n        <tr>\n          <td>show</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Shows the modal when initialized.</td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$alertProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($alertProvider) {\n            angular.extend($alertProvider.defaults, {\n              animation: \'animation-fadeAndSlideTop\',\n              placement: \'top\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the alert.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the alert.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the alert.</p>\n\n</div>\n'),a.put("alert/docs/alert.tpl.demo.html",'<div class="alert" tabindex="-1" ng-class="[type ? \'alert-\' + type : null]">\n  <button type="button" class="close" ng-click="$hide()">&times;</button>\n  <strong ng-bind="title"></strong>&nbsp;<span ng-bind-html="content"></span>\n</div>\n'),a.put("aside/docs/aside.demo.html",'<div class="bs-docs-section" ng-controller="AsideDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="asides">Asides <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/aside/aside.js" target="_blank">aside.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.aside</code>\n  </div>\n\n\n  <h2 id="asides-examples">Examples</h2>\n  <p>Asides are custom panels, drawers that inherit the behavior of modals.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Asides require the <a href="#modals">modal plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo <a class="small" href="#" target="_blank"><i class="fa fa-edit" data-title="edit in plunker" data-placement="right" bs-tooltip></i></a></h3>\n  <pre class="bs-example-scope">$scope.aside = {{aside | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default aside with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" bs-aside="aside">Click to toggle aside\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" data-template="aside/docs/aside.tpl.demo.html" data-placement="left" data-animation="animation-fadeAndSlideLeft" bs-aside="aside">Custom aside\n      <br />\n      <small>(using data-template)</small>\n    </button>\n\n  </div>\n\n\n  <h2 id="asides-usage">Usage</h2>\n  <p>Append a <code>bs-aside</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$aside</code>service</h4>\n    <p>Available for programmatic use.</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .controller(\'DemoCtrl\', function($scope, $aside) {\n            // Show a basic aside from a controller\n            var myAside = $aside({title: \'My Title\', content: \'My Content\', show: true});\n\n            // Pre-fetch an external template populated with a custom scope\n            var myOtherAside = $aside({scope: $scope, template: \'aside/docs/aside.tpl.demo.html\'});\n            // Show when some event occurs (uses promises to ensure the template has been loaded)\n            myOtherModal.deferred.then(function() {\n              myOtherModal.show();\n            })\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-aside</code> attribute</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>animation-fade</td>\n          <td>apply a CSS animation powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'top\'</td>\n          <td>how to position the modal - top | bottom | center <small>(requires custom CSS)</small>.</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if\n            <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if\n            <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>backdrop</td>\n          <td>boolean or the string\n            <code>\'static\'</code>\n          </td>\n          <td>true</td>\n          <td>Includes a modal-backdrop element. Alternatively, specify\n            <code>static</code>for a backdrop which doesn\'t close the modal on click.</td>\n        </tr>\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the modal when escape key is pressed</td>\n        </tr>\n        <tr>\n          <td>show</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Shows the modal when initialized.</td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$asideProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($asideProvider) {\n            angular.extend($asideProvider.defaults, {\n              animation: \'animation-fadeAndSlideLeft\',\n              placement: \'left\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the aside.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the aside.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the aside.</p>\n\n</div>\n'),a.put("aside/docs/aside.tpl.demo.html",'<div class="aside" tabindex="-1" role="dialog">\n  <div class="aside-dialog">\n    <div class="aside-content">\n      <div class="aside-header" ng-show="title">\n        <button type="button" class="close" ng-click="$hide()">&times;</button>\n        <h4 class="aside-title" ng-bind-html="title"></h4>\n      </div>\n      <div class="aside-body" ng-show="content">\n\n        <h4>Text in aside</h4>\n        <p ng-bind-html="content"></p>\n        <pre>2 + 3 = {{ 2 + 3 }}</pre>\n\n        <h4>Popover in aside</h4>\n        <p>This <a href="#" role="button" class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</a> should trigger a popover on click.</p>\n\n        <h4>Tooltips in aside</h4>\n        <p><a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>This link</a> and <a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>that link</a> should have tooltips on hover.</p>\n\n      </div>\n      <div class="aside-footer">\n        <button type="button" class="btn btn-default" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="$hide()">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n'),a.put("button/docs/button.demo.html",'<div class="bs-docs-section" ng-controller="ButtonDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="buttons">Buttons <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/button/button.js" target="_blank">button.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.button</code>\n  </div>\n\n\n    <h2 id="buttons-examples">Examples</h2>\n    <p>Do more with buttons. Control button states or create groups of buttons for more components like toolbars.</p>\n    <p>This modules exposes two directives: <code>bs-checkbox</code> and <code>bs-radio</code> that can be used as attributes to trigger toggle, checkbox or radio behavior.</p>\n    <div class="callout callout-info">\n      <h4>Group directives are also available as shortcuts</h4>\n      <p>Use <code>bs-checkbox-group</code> and <code>bs-radio-group</code> to easily setup the proper markup at compile time.</p>\n    </div>\n\n    <h3 id="buttons-usage">Live demo <a class="small" href="#" target="_blank"><i class="fa fa-edit" data-title="edit in plunker" data-placement="right" bs-tooltip></i></a></h3>\n\n    <pre class="bs-example-scope">$scope.button = {{button | json}};</pre>\n    <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n      <label>Toggle:</label>\n      <button type="button" class="btn btn-default" ng-model="button.toggle" bs-checkbox>Toggle</button>\n      <!-- You can also use custom values with the `data-true-value` & `data-false-value` attributes -->\n\n      <hr><label>Checkboxes:</label>\n      <div class="btn-group" ng-model="button.checkbox" bs-checkbox-group>\n        <label class="btn btn-default"><input type="checkbox" value="left"> Left</label>\n        <label class="btn btn-default"><input type="checkbox" value="middle"> Middle</label>\n        <label class="btn btn-default"><input type="checkbox" value="right"> Right</label>\n        <!-- Children get compiled by `bs-checkbox-group` to :\n        <label class="btn btn-default"><input type="checkbox" value="left" ng-model="button.checkbox.left" bs-checkbox> Left</label>\n        ...\n        -->\n      </div>\n\n      <hr><label>Radios:</label>\n      <div class="btn-group" ng-model="button.radio" bs-radio-group>\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="0"> First</label>\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="1"> Second</label>\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="2"> Third</label>\n        <!-- Children get compiled by `bs-radio-group` to :\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="left" ng-model="button.radio" bs-radio> Left</label>\n        ...\n        -->\n      </div>\n\n    </div>\n\n    <div class="callout callout-info">\n      <h4>Type support</h4>\n      <p>Theses directives can handle both <code>strings</code>, <code>numbers</code> and <code>booleans</code> values.</p>\n    </div>\n\n</div>\n'),a.put("dropdown/docs/dropdown.demo.html",'<div class="bs-docs-section" ng-controller="DropdownDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="dropdowns">Dropdowns <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/directives/dropdown.js" target="_blank">dropdown.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.dropdown</code>\n  </div>\n\n\n  <h2 id="dropdowns-examples">Examples</h2>\n  <p>Add dropdown menus to nearly anything with this simple plugin, including the navbar, tabs, and pills.</p>\n  <p>Append a <code>bs-dropdown</code> attribute to any element to enable the plugin.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Dropdowns require the <a href="#tooltips">tooltip plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo</h3>\n  <pre class="bs-example-scope">$scope.dropdown = {{dropdown | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default dropdown with a scope as an object [{title:\'\', content:\'\', etc.}] -->\n    <button type="button" class="btn btn-lg btn-primary" data-animation="animation-flipX" bs-dropdown="dropdown">Click to toggle dropdown\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n  </div>\n\n\n  <h2 id="dropdowns-usage">Usage</h2>\n  <div class="callout callout-info">\n    <h4>Two-way data-binding</h4>\n    <p>To prevent databinding issues, "the rule of thumb is, if you﻿ use <code>ng-model</code> there has to be a dot somewhere." Miško Hevery.</p>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the dropdown.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the dropdown.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the dropdown.</p>\n\n</div>\n'),a.put("modal/docs/modal.demo.html",'<div class="bs-docs-section" ng-controller="ModalDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="modals">Modals <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/modal/modal.js" target="_blank">modal.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.modal</code>\n  </div>\n\n\n  <h2 id="modals-examples">Examples</h2>\n  <p>Modals are streamlined, but flexible, dialog prompts with the minimum required functionality and smart defaults.</p>\n\n  <h3>Live demo <a class="small" href="#" target="_blank"><i class="fa fa-edit" data-title="edit in plunker" data-placement="right" bs-tooltip></i></a></h3>\n  <pre class="bs-example-scope">$scope.modal = {{modal | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default modal with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="center" data-animation="animation-flipX" bs-modal="modal">Click to toggle modal\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" data-animation="animation-fadeAndScale"  data-template="modal/docs/modal.tpl.demo.html" bs-modal="modal">Custom Modal\n      <br />\n      <small>(using data-template)</small>\n    </button>\n\n  </div>\n\n  <h2 id="modals-usage">Usage</h2>\n  <p>Append a <code>bs-modal</code>attribute to any element to activate the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes a <code>$modal</code>service</h4>\n    <p>Available for programmatic use (inside a directive/controller).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .controller(\'DemoCtrl\', function($scope, $modal) {\n            // Show a basic modal from a controller\n            var myModal = $modal({title: \'My Title\', content: \'My Content\', show: true});\n\n            // Pre-fetch an external template populated with a custom scope\n            var myOtherModal = $modal({scope: $scope, template: \'modal/docs/modal.tpl.demo.html\'});\n            // Show when some event occurs (uses promises to ensure the template has been loaded)\n            myOtherModal.deferred.then(function() {\n              myOtherModal.show();\n            })\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-modal</code> attribute</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>animation-fade</td>\n          <td>apply a CSS animation powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'top\'</td>\n          <td>how to position the modal - top | bottom | center <small>(requires custom CSS)</small>.</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if\n            <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if\n            <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>backdrop</td>\n          <td>boolean or the string\n            <code>\'static\'</code>\n          </td>\n          <td>true</td>\n          <td>Includes a modal-backdrop element. Alternatively, specify\n            <code>static</code>for a backdrop which doesn\'t close the modal on click.</td>\n        </tr>\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the modal when escape key is pressed</td>\n        </tr>\n        <tr>\n          <td>show</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Shows the modal when initialized.</td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$modalProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($modalProvider) {\n            angular.extend($modalProvider.defaults, {\n              animation: \'animation-flipX\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the modal.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the modal.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the modal.</p>\n\n</div>\n'),a.put("modal/docs/modal.tpl.demo.html",'<div class="modal" tabindex="-1" role="dialog">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" ng-click="$hide()">&times;</button>\n        <h4 class="modal-title" ng-bind-html="title"></h4>\n      </div>\n      <div class="modal-body" ng-show="content">\n\n        <h4>Text in a modal</h4>\n        <p ng-bind-html="content"></p>\n        <pre>2 + 3 = {{ 2 + 3 }}</pre>\n\n        <h4>Popover in a modal</h4>\n        <p>This <a href="#" role="button" class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</a> should trigger a popover on click.</p>\n\n        <h4>Tooltips in a modal</h4>\n        <p><a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>This link</a> and <a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>that link</a> should have tooltips on hover.</p>\n\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-default" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="$hide()">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n'),a.put("popover/docs/popover.demo.html",'<div class="bs-docs-section" ng-controller="PopoverDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="popovers">Popovers <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/directives/popover.js" target="_blank">popover.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.popover</code>\n  </div>\n\n\n  <h2 id="popovers-examples">Examples</h2>\n  <p>Add small overlays of content on tap, like those on the iPad, to any element for housing secondary information.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Popovers require the <a href="#tooltips">tooltip plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo <a class="small" href="#" target="_blank"><i class="fa fa-edit" data-title="edit in plunker" data-placement="right" bs-tooltip></i></a></h3>\n  <div class="form-group hide">\n    <label>Title</label>\n    <input type="text" class="form-control" ng-model="popover.title" placeholder="Title">\n    <label>Content</label>\n    <textarea class="form-control" ng-model="popover.content" rows="3"></textarea>\n  </div>\n  <pre class="bs-example-scope">$scope.popover = {{popover | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n    <!-- Button to trigger a default popover with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="bottom" data-animation="animation-flipX" bs-popover="popover">Click to toggle popover\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can also use data-attrs to assign scope variables -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="top-right" title="{{popover.title}}" data-content="{{popover.content}}" bs-popover>Click to toggle popover\n      <br />\n      <small>(using data-attrs)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" title="{{popover.title}}" data-content="{{popover.content}}" data-template="popover/docs/popover.tpl.demo.html" data-animation="animation-flipX" bs-popover>Custom Popover\n      <br />\n      <small>(using data-template)</small>\n    </button>\n  </div>\n\n  <h2 id="popovers-usage">Usage</h2>\n  <p>Append a <code>bs-popover</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$popover</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myPopover = $popover(element, {title: \'My Title\', content: \'My Content\'});\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-popover</code> attribute</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your popover in corners (such as <code>bottom-left</code>) or any other combination two. Requires some CSS to render properly.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>animation-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'right\'</td>\n          <td>how to position the popover - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'click\'</td>\n          <td>how popover is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if\n            <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if\n            <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the popover (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$popoverProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($popoverProvider) {\n            angular.extend($popoverProvider.defaults, {\n              animation: \'animation-flipX\',\n              trigger: \'hover\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the popover.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the popover.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the popover.</p>\n\n</div>\n'),a.put("popover/docs/popover.tpl.demo.html",'<div class="popover panel panel-primary" ng-show="content">\n  <div class="arrow"></div>\n  <h3 class="popover-title" ng-bind-html="title" ng-show="title"></h3>\n  <div class="popover-content">\n    <form name="popoverForm">\n      <p ng-bind-html="content" style="min-width:300px;"></p>\n      <pre>2 + 3 = <span ng-cloak>{{ 2 + 3 }}</span></pre>\n      <div class="form-actions">\n        <button type="button" class="btn btn-danger" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="popover.saved=true;$hide()">Save changes</button>\n      </div>\n    </form>\n  </div>\n</div>\n'),a.put("scrollspy/docs/scrollspy.demo.html",'<div class="bs-docs-section">\n\n  <div class="page-header">\n    <h1 id="scrollspy">scrollspy <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/scrollspy/scrollspy.js" target="_blank">scrollspy.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.scrollspy</code>\n  </div>\n\n  <h2 id="scrollspy-examples">Examples</h2>\n  <p>The subnavigation on the left is a live demo of the scrollspy plugin.</p>\n\n  <div class="callout callout-warning">\n    <h4>Plugin dependency</h4>\n    <p>scrollspy require the <a href="#">jqlite.dimensions</a> plugin to be included.</p>\n  </div>\n\n  <div class="highlight">\n    <pre>\n      <code class="html" highlight-block>\n        &lt;ul class="nav bs-sidenav"&gt;\n          &lt;li data-target="#modals" bs-scrollspy&gt;\n            &lt;a href="#modals"&gt;Modal&lt;/a&gt;\n            &lt;ul class="nav"&gt;\n              &lt;li data-target="#modals-examples" bs-scrollspy&gt;&lt;a href="#modals-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;\n              &lt;li data-target="#modals-usage" bs-scrollspy&gt;&lt;a href="#modals-usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n\n        <!-- Alternatively, you can use the short following equivalent short markup -->\n        &lt;ul class="nav bs-sidenav" bs-scrollspy-list&gt;\n          &lt;li&gt;\n            &lt;a href="#modals"&gt;Modal&lt;/a&gt;\n            &lt;ul class="nav"&gt;\n              &lt;li&gt;&lt;a href="#modals-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;\n              &lt;li&gt;&lt;a href="#modals-usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n      </code>\n    </pre>\n  </div>\n\n  <h2 id="scrollspy-usage">Usage</h2>\n  <p>Append a <code>bs-scrollspy</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$scrollspy</code>service</h4>\n    <p>Available for programmatic use (mainly inside a directive as it requires an element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var scrollspy = $scrollspy(element, options);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>target</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>Required target selector.</td>\n        </tr>\n        <tr>\n          <td>offset</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from top of screen when calculating position of scroll.</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$scrollspyProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($scrollspyProvider) {\n            angular.extend($scrollspyProvider.defaults, {\n              animation: \'animation-fadeAndSlideTop\',\n              placement: \'top\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("tab/docs/tab.demo.html",'<div class="bs-docs-section" ng-controller="TabDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="tabs">Tabs <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/tab/tab.js" target="_blank">tab.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.tab</code>\n  </div>\n\n\n  <h2 id="tabs-examples">Examples</h2>\n  <p>Add quick, dynamic tab functionality to transition through panes of local content.</p>\n\n  <h3>Live demo <a class="small" href="#" target="_blank"><i class="fa fa-edit" data-title="edit in plunker" data-placement="right" bs-tooltip></i></a>\n    </h2>\n    <pre class="bs-example-scope">$scope.tabs = {{tabs | json}};</pre>\n    <div class="bs-example" append-source>\n      <div ng-model="tabs.activeTab" data-animation="animation-fade" bs-tabs="tabs">\n      </div>\n    </div>\n    <div class="bs-example" style="padding-bottom: 24px;">\n      <label>activeTab:</label>\n      <strong class="text-danger">{{tabs.activeTab}}</strong>&nbsp;\n      <div class="btn-group" ng-model="tabs.activeTab" bs-radio-group>\n        <label class="btn btn-default">\n          <input type="radio" class="btn btn-default" value="0">First</label>\n        <label class="btn btn-default">\n          <input type="radio" class="btn btn-default" value="1">Second</label>\n        <label class="btn btn-default">\n          <input type="radio" class="btn btn-default" value="2">Third</label>\n      </div>\n    </div>\n  </h3>\n\n  <h2 id="tabs-usage">Usage</h2>\n  <p>Append a <code>bs-tabs</code>attribute to any element to enable the directive.</p>\n\n  <div class="bs-callout bs-callout-info">\n    <h4>Custom animations</h4>\n    <p>Pane animation is done with <code>ngClass(\'active\')</code> callbacks and require custom CSS.</p>\n    <pre class="bs-exemple-code">\n      <code class="css" highlight-block>\n        .tab-pane {\n          opacity: 1;\n          transition: opacity .3s ease;\n          min-height:60px;\n          &.active-add {\n            display: block;\n            opacity: 0;\n            &.active-add-active {\n              opacity: 1;\n            }\n          }\n          &.active-remove {\n            display: none;\n          }\n        }\n      </code>\n    </pre>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data attributes or as an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object on\n    <code>bs-tabs</code>. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>animation-fade</td>\n          <td>apply a CSS animation to the popover with <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If a remote URL is provided, overrides the default template</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$tabProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($tabProvider) {\n            angular.extend($tabProvider.defaults, {\n              animation: \'animation-flipX\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("tab/docs/tab.tpl.demo.html",'<div class="modal" tabindex="-1" role="dialog">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" ng-click="$hide()">&times;</button>\n        <h4 class="modal-title" ng-bind-html="title"></h4>\n      </div>\n      <div class="modal-body" ng-show="content">\n\n        <h4>Text in a modal</h4>\n        <p ng-bind-html="content"></p>\n        <pre>2 + 3 = {{ 2 + 3 }}</pre>\n\n        <h4>Popover in a modal</h4>\n        <p>This <a href="#" role="button" class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</a> should trigger a popover on click.</p>\n\n        <h4>Tooltips in a modal</h4>\n        <p><a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>This link</a> and <a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>that link</a> should have tooltips on hover.</p>\n\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-default" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="$hide()">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n'),a.put("tooltip/docs/tooltip.demo.html",'<div class="bs-docs-section" ng-controller="TooltipDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="tooltips">Tooltips <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/directives/tooltip.js" target="_blank">tooltip.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.tooltip</code>\n  </div>\n\n\n  <h2 id="tooltips-examples">Examples</h2>\n  <p>Add small overlays of content on hover, to any element for housing secondary information.</p>\n\n  <h3>Live demo</h3>\n  <div class="form-group hide">\n    <label>Title</label>\n    <input type="text" class="form-control" ng-model="tooltip.title" placeholder="Title">\n  </div>\n  <pre class="bs-example-scope">$scope.tooltip = {{tooltip | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Markup for a default tooltip with a scope passed as an object {title:\'\'} -->\n    <p>Tight pants next level keffiyeh <a href="" data-animation="animation-flipX" bs-tooltip="tooltip">you probably</a> haven\'t heard of them. Photo booth beard raw denim letterpress vegan messenger bag stumptown.</p>\n\n    <div class="input-group col-xs-5">\n      <span class="input-group-btn">\n        <!-- You can also use data-attrs to assign scope variables -->\n        <button class="btn btn-primary" type="button" data-trigger="click" data-type="success" title="{{tooltip.title}}" bs-tooltip="tooltip">Click me</button>\n      </span>\n      <input type="text" class="form-control" data-placement="right" data-type="info" data-container="body" placeholder="Focus to toggle tooltip" data-trigger="focus" bs-tooltip="tooltip">\n    </div>\n    <div class="checkbox">\n      <label data-placement="bottom" data-animation="animation-fadeAndScale" data-type="info" data-animation="animation-fadeAndScale" bs-tooltip="tooltip">\n        <input type="checkbox" ng-model="tooltip.checked"> Remember me\n      </label>\n    </div>\n\n  </div>\n\n  <div class="callout callout-info">\n    <h4>Two-way data-binding</h4>\n    <p>To prevent databinding issues, "the rule of thumb is, if you﻿ use <code>ng-model</code> there has to be a dot somewhere." Miško Hevery.</p>\n  </div>\n\n  <h2 id="tooltips-usage">Usage</h2>\n  <p>Append a <code>bs-tooltip</code> attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$tooltip</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myTooltip = $tooltip(element, {title: \'My Title\'});\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-tooltip</code> attribute</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your popover in corners (such as <code>bottom-left</code>) or any other combination two. Requires some CSS to render properly.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>animation-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'right\'</td>\n          <td>how to position the tooltip - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'click\'</td>\n          <td>how tooltip is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if\n            <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the tooltip (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the tooltip to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element -&nbsp;which will prevent the tooltip from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$tooltipProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($tooltipProvider) {\n            angular.extend($tooltipProvider.defaults, {\n              animation: \'animation-flipX\',\n              trigger: \'hover\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the tooltip.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the tooltip.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the tooltip.</p>\n\n</div>\n'),a.put("tooltip/docs/tooltip.tpl.demo.html",'<div class="tooltip tooltip-info" ng-show="title">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="title"></div>\n</div>\n')
}]);